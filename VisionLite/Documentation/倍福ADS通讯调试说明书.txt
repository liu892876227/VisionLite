========================================
       倍福ADS通讯调试完整说明书
========================================

本文档详细说明VisionLite中倍福ADS通讯的所有实现细节、调试方法和可能需要调整的地方。

========================================
第一部分：代码架构理解
========================================

1.1 核心类关系图
-----------------
SimpleConnectionConfig（基础配置）
    ↓ 继承
AdsConnectionConfig（ADS专用配置）
    ↓ 作为构造参数传入
AdsCommunication（ADS通讯实现类）
    ↓ 实现接口
ICommunication（统一通讯接口）

1.2 ADS通讯原理
-----------------
数据流向：VisionLite → TwinCAT.Ads库 → AMS Router → TwinCAT Runtime → 实体PLC

连接建立过程：
1. 创建AdsClient实例
2. 配置目标AMS NetId和Port
3. 通过TCP协议连接到PLC
4. 建立ADS会话
5. 通过变量句柄进行数据交换

1.3 关键文件列表
-----------------
- SimpleConnectionConfig.cs：基础连接配置，包含CreateAdsCommunication()方法
- AdsConnectionConfig.cs：ADS专用配置类，包含NetId、Port等参数
- AdsCommunication.cs：核心通讯实现，包含所有读写逻辑
- SimpleCommunicationWindow.xaml/.cs：UI界面和事件处理

========================================
第二部分：详细实现解析
========================================

2.1 AdsConnectionConfig配置参数详解
-----------------------------------
class AdsConnectionConfig : SimpleConnectionConfig
{
    // 核心配置参数：
    TargetAmsNetId : string     // PLC的AMS网络标识符，格式：192.168.1.100.1.1
    TargetAmsPort : int         // AMS端口，TwinCAT Runtime默认851
    Timeout : int               // 连接超时时间，单位毫秒，建议5000-10000
    UseSymbolicAccess : bool    // 启用符号访问，允许通过变量名读写
    Variables : List<AdsVariableInfo>  // 预定义变量列表
}

重要方法：
- Parse(string): 解析连接字符串，格式"192.168.1.100.1.1:851"
- ToConnectionString(): 生成连接字符串
- IsValid(out string): 验证配置有效性

2.2 AdsCommunication核心实现剖析
--------------------------------

2.2.1 关键字段说明：
private AdsClient _adsClient;                           // TwinCAT.Ads官方客户端
private ConcurrentDictionary<string, uint> _handleCache; // 变量句柄缓存
private CancellationTokenSource _cancellationTokenSource; // 取消令牌源
private volatile bool _disposed;                         // 资源释放标志

2.2.2 连接建立详细流程（OpenAsync方法）：
步骤1：状态检查和设置
- 检查当前连接状态，避免重复连接
- 设置状态为Connecting
- 记录连接开始日志

步骤2：创建和配置AdsClient
_adsClient = new AdsClient();
_adsClient.Timeout = _config.Timeout;  // 设置通讯超时

步骤3：创建目标地址
var targetAddress = new AmsAddress(_config.TargetAmsNetId, _config.TargetAmsPort);

步骤4：建立物理连接
await _adsClient.ConnectAsync(targetAddress, _cancellationTokenSource.Token);

步骤5：验证连接（读取设备信息）
var deviceInfo = await _adsClient.ReadDeviceInfoAsync(_cancellationTokenSource.Token);
// 成功读取设备信息说明连接正常建立

2.2.3 变量句柄管理机制：
目的：TwinCAT ADS使用句柄方式访问变量，句柄是变量在PLC内存中的索引

GetOrCreateHandleAsync(string variableName)流程：
1. 检查_handleCache中是否已存在该变量的句柄
2. 如果存在，直接返回缓存的句柄
3. 如果不存在：
   - 调用_adsClient.CreateVariableHandleAsync(variableName)
   - 将新句柄存入缓存
   - 返回句柄值

重要：句柄创建是异步操作，需要与PLC通讯，因此使用缓存提高性能。

2.2.4 数据读写实现详解：
读取操作（ReadVariableAsync<T>）：
1. 验证连接状态和参数
2. 获取变量句柄：uint handle = await GetOrCreateHandleAsync(variableName)
3. 执行读取：var result = await _adsClient.ReadAnyAsync<T>(0xF005, handle, token)
4. 返回数据：return result.Value

写入操作（WriteVariableAsync<T>）：
1. 验证连接状态和参数
2. 获取变量句柄：uint handle = await GetOrCreateHandleAsync(variableName)
3. 执行写入：await _adsClient.WriteAnyAsync(0xF005, handle, value, token)

关键常数说明：
- IndexGroup = 0xF005：表示"通过句柄访问变量"的ADS协议常数
- IndexOffset = handle：具体变量的句柄值

2.2.5 资源释放机制（Dispose方法）：
1. 释放所有缓存的变量句柄
   foreach (var handle in _handleCache.Values)
       await _adsClient.DeleteVariableHandleAsync(handle, CancellationToken.None)
2. 断开ADS连接：_adsClient?.Dispose()
3. 取消所有异步操作：_cancellationTokenSource?.Cancel()

========================================
第三部分：UI集成实现
========================================

3.1 连接创建流程（SimpleConnectionConfig.cs）
---------------------------------------------
CreateAdsCommunication()方法实现：
1. 创建AdsConnectionConfig实例
   - Name = this.Name（UI输入的连接名称）
   - TargetAmsNetId = this.IpAddress（UI中"IP地址"字段实际存储NetId）
   - TargetAmsPort = this.Port（UI中端口字段）
   - Timeout = 5000（固定5秒超时）

2. 创建AdsCommunication实例
   return new AdsCommunication(adsConfig);

3.2 UI参数映射关系
-------------------
UI界面字段 → ADS配置参数：
- 连接名称 → Name
- IP地址 → TargetAmsNetId（注意：这里不是真实IP，而是AMS NetId）
- 端口 → TargetAmsPort
- 超时时间 → 在代码中固定为5000ms

3.3 ADS操作面板实现（SimpleCommunicationWindow.xaml.cs）
-------------------------------------------------------
关键方法：
- InitializeAdsPanel()：初始化ADS操作界面
- UpdateAdsControls()：更新控件状态
- AdsReadButton_Click()：变量读取事件
- AdsWriteButton_Click()：变量写入事件

========================================
第四部分：调试方法和常见问题
========================================

4.1 调试准备检查清单
-------------------
网络连接：
□ ping PLC的IP地址确保网络连通
□ 确保PC和PLC在同一网段
□ 检查网络防火墙设置，确保TCP 851端口开放

PLC状态：
□ 确认PLC电源正常，运行指示灯正常
□ 检查TwinCAT Runtime状态（应为Run Mode）
□ 确认PLC程序已正确下载并运行
□ 验证测试变量已在PLC中定义

AMS配置：
□ 确认PLC的AMS NetId格式正确（如：192.168.1.100.1.1）
□ 检查AMS Router服务状态
□ 验证AMS端口设置（通常为851）

4.2 分步调试方法
-----------------
第一步：网络连通性测试
在命令提示符中执行：ping 192.168.1.100
如果ping失败，检查网络配置和物理连接。

第二步：ADS连接测试
在VisionLite中：
1. 创建ADS连接，使用正确的NetId和Port
2. 点击"连接"按钮
3. 观察通讯日志中的连接信息
4. 成功标志：状态显示"已连接"，日志显示设备信息

第三步：基础变量读取测试
首先测试系统变量（这些变量在所有TwinCAT系统中都存在）：
- TwinCAT_SystemInfoVarList._TaskInfo[1].CycleTime
- TwinCAT_SystemInfoVarList._AppInfo.ProjectName

然后测试用户变量（需要在PLC程序中定义）：
- GVL.bTestBool
- GVL.iTestInt

第四步：数据写入测试
1. 读取现有变量值
2. 写入新值
3. 再次读取验证写入成功

4.3 常见错误和解决方法
---------------------
错误1："ADS连接失败"
原因：网络不通或PLC未运行
解决：
- 检查网络连接：ping PLC IP
- 检查PLC状态：确认运行指示灯
- 验证TwinCAT Runtime状态

错误2："变量不存在"
原因：变量名错误或PLC中未定义该变量
解决：
- 检查变量名拼写（区分大小写）
- 在TwinCAT中确认变量已定义
- 确认PLC程序已下载并运行

错误3："句柄创建失败"
原因：PLC中变量类型与代码中类型不匹配
解决：
- 检查PLC中变量的数据类型
- 确保C#中的泛型类型<T>与PLC变量类型匹配
- BOOL → bool，INT → int，REAL → float，STRING → string

错误4："连接超时"
原因：网络延迟或PLC响应慢
解决：
- 增加Timeout设置（在AdsConnectionConfig中）
- 检查网络质量
- 减少同时访问的变量数量

4.4 性能优化建议
-----------------
1. 句柄缓存：
   - 系统会自动缓存变量句柄，避免重复创建
   - 频繁访问的变量会获得更好性能

2. 批量操作：
   - 使用ReadMultipleAsync()同时读取多个变量
   - 避免循环中频繁的单个读写操作

3. 连接管理：
   - 保持长连接，避免频繁连接/断开
   - 应用程序退出时正确调用Dispose()释放资源

========================================
第五部分：可能需要调整的配置参数
========================================

5.1 网络参数调整
-----------------
场景：网络环境较差或距离较远
调整位置：AdsConnectionConfig.cs构造函数
调整内容：
Timeout = 10000;  // 从5000ms增加到10000ms

场景：需要连接多个PLC
调整位置：SimpleConnectionConfig.GetDefaultAds()
调整内容：
IpAddress = "192.168.1.101.1.1",  // 修改为实际PLC的NetId

5.2 UI响应优化
---------------
场景：读写操作阻塞UI
调整位置：SimpleCommunicationWindow.xaml.cs中的事件处理方法
调整方法：确保所有ADS操作都使用await，避免阻塞UI线程

场景：需要显示更多调试信息
调整位置：AdsCommunication.cs中的日志输出
调整方法：增加详细的调试日志：
LogReceived?.Invoke($"[调试] 句柄缓存数量：{_handleCache.Count}");

5.3 数据类型映射调整
-------------------
如果PLC中使用特殊数据类型，可能需要调整：

PLC数据类型 → C#类型映射：
- BOOL → bool
- INT → short (16位整数) 
- DINT → int (32位整数)
- REAL → float (32位浮点数)
- LREAL → double (64位浮点数)
- STRING → string
- TIME → TimeSpan
- DATE_AND_TIME → DateTime

5.4 错误处理增强
-----------------
场景：需要更详细的错误信息
调整位置：AdsCommunication.cs中的catch块
增加内容：
catch (AdsException adsEx)
{
    LogReceived?.Invoke($"[ADS错误] 错误码: {adsEx.ErrorCode}, 描述: {adsEx.Message}");
    throw;
}

========================================
第六部分：PLC端配置要求
========================================

6.1 TwinCAT项目设置
-------------------
全局变量列表(GVL)中添加测试变量：
VAR_GLOBAL
    bTestBool       : BOOL := FALSE;
    iTestInt        : INT := 1234;
    rTestReal       : REAL := 3.14159;
    sTestString     : STRING := 'VisionLite Test';
    iCounter        : INT := 0;
    bHeartbeat      : BOOL := FALSE;
END_VAR

主程序(MAIN)中添加动态逻辑：
PROGRAM MAIN
VAR
    fbTimer : TON;
END_VAR

fbTimer(IN := TRUE, PT := T#1S);
IF fbTimer.Q THEN
    fbTimer(IN := FALSE);
    iCounter := iCounter + 1;
    bHeartbeat := NOT bHeartbeat;
END_IF

6.2 AMS设置
------------
1. 确认PLC的AMS NetId正确配置
2. 允许外部ADS访问（在TwinCAT System Manager中设置）
3. 确认防火墙允许ADS通讯端口（TCP 851）

========================================
第七部分：故障诊断流程图
========================================

连接失败？
├─ 是 → 检查网络连通性(ping)
│      ├─ ping失败 → 检查网络配置和物理连接
│      └─ ping成功 → 检查AMS NetId和端口配置
│
└─ 否 → 变量访问失败？
       ├─ 是 → 检查变量名拼写和PLC程序状态
       │      ├─ 变量不存在 → 在PLC中定义变量
       │      └─ 变量存在 → 检查数据类型匹配
       │
       └─ 否 → 性能问题？
              ├─ 是 → 增加超时时间，优化读写频率
              └─ 否 → 连接正常，可以正常使用

========================================
第八部分：日志分析指南
========================================

8.1 正常连接日志示例
-------------------
[连接] 正在连接到 192.168.1.100.1.1:851...
[连接] 设备信息: TwinCAT Runtime v3.1.4024.25
[连接] ADS连接成功
[系统] 变量 GVL.bTestBool 句柄已创建: 0x00000001
[读取] GVL.bTestBool = False

8.2 错误日志分析
-----------------
"连接超时" → 网络问题或PLC未响应
"变量不存在" → 变量名错误或PLC程序问题
"句柄创建失败" → 数据类型不匹配或权限问题
"ADS错误码 1793" → 服务未运行
"ADS错误码 1794" → 权限拒绝

========================================
结语
========================================

本说明书涵盖了VisionLite中倍福ADS通讯的所有实现细节和调试方法。
在实际使用中，建议按照以下顺序进行：
1. 先确保网络连通和PLC状态正常
2. 使用系统变量测试基础连接功能
3. 逐步添加用户自定义变量
4. 根据实际需求调整超时和性能参数

如遇到特殊问题，请参考本文档中的故障诊断流程图进行排查。